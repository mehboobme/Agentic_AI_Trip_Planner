import streamlit as st
import requests
import datetime

# === Backend URL ===
# When deploying on Hugging Face, this should be the Space's backend URL or internal path.
BASE_URL = "http://localhost:8000"  # Change to actual API URL in deployment

# === Streamlit Config ===
st.set_page_config(
    page_title="🌍 AI Travel Planner",
    page_icon="🌍",
    layout="centered",
    initial_sidebar_state="expanded",
)

st.title("🌍 Travel Planner Agentic Application")
st.subheader("Your personalized AI trip assistant")

# === Initialize Chat State ===
if "messages" not in st.session_state:
    st.session_state.messages = []

# === Chat History Display ===
with st.expander("📜 Conversation History", expanded=False):
    for msg in st.session_state.messages:
        st.markdown(f"- **You**: {msg['question']}")
        st.markdown(f"- **AI**: {msg['answer']}\n")

# === Input Form ===
st.header("✈️ Plan your next trip")
with st.form(key="query_form", clear_on_submit=True):
    user_input = st.text_input(
        "Where would you like to go?",
        placeholder="e.g. Plan a 7-day trip to Istanbul with hotel and activities"
    )
    submit_button = st.form_submit_button("Send")

# === Query Backend ===
if submit_button and user_input.strip():
    try:
        with st.spinner("🤖 Generating travel plan..."):
            payload = {"question": user_input}
            response = requests.post(f"{BASE_URL}/query", json=payload)

        if response.status_code == 200:
            answer = response.json().get("answer", "⚠️ No answer returned.")
            timestamp = datetime.datetime.now().strftime('%Y-%m-%d %H:%M')
            
            markdown_response = f"""
### 🧭 AI-Powered Travel Plan
**Generated:** {timestamp}  
**Requested by:** You  
**Created by:** Atriyo's Travel Agent  
___

{answer}

---

⚠️ *This travel plan was generated by AI. Please double-check prices, travel requirements, and local guidelines.*
"""
            st.session_state.messages.append({"question": user_input, "answer": answer})
            st.markdown(markdown_response)

        else:
            st.error(f"❌ Backend Error: {response.status_code} - {response.text}")

    except requests.exceptions.ConnectionError:
        st.error("🚫 Cannot connect to backend. Make sure the server is running.")
    except Exception as e:
        st.error(f"💥 Unexpected error: {str(e)}")
